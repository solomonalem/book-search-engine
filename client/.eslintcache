[{"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\index.js":"1","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\App.js":"2","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\pages\\SavedBooks.js":"3","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\pages\\SearchBooks.js":"4","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\components\\Navbar.js":"5","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\components\\SignupForm.js":"6","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\components\\LoginForm.js":"7","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\API.js":"8","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\auth.js":"9","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\localStorage.js":"10","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\queries.js":"11","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\mutations.js":"12"},{"size":266,"mtime":1609120229737,"results":"13","hashOfConfig":"14"},{"size":1069,"mtime":1609735256990,"results":"15","hashOfConfig":"14"},{"size":2923,"mtime":1609730308473,"results":"16","hashOfConfig":"14"},{"size":4797,"mtime":1609733855429,"results":"17","hashOfConfig":"14"},{"size":2524,"mtime":1609118117211,"results":"18","hashOfConfig":"14"},{"size":3265,"mtime":1609731201945,"results":"19","hashOfConfig":"14"},{"size":2602,"mtime":1609732030345,"results":"20","hashOfConfig":"14"},{"size":1533,"mtime":1609734651596,"results":"21","hashOfConfig":"14"},{"size":1234,"mtime":1609118117443,"results":"22","hashOfConfig":"14"},{"size":793,"mtime":1609118117499,"results":"23","hashOfConfig":"14"},{"size":353,"mtime":1609727597395,"results":"24","hashOfConfig":"14"},{"size":1073,"mtime":1609734963236,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"8n1r7q",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\index.js",[],["54","55"],"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\App.js",[],"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\pages\\SavedBooks.js",["56"],"import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\n\n\nimport Auth from '../utils/auth';\nimport { useQuery,useMutation } from '@apollo/react-hooks';\nimport { QUERY_USER } from '../utils/queries';\nimport { DELETE_BOOK } from '../utils/mutations';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n  \n  const { username: userParam } = useParams();\n\n  const { loading, data } = useQuery(QUERY_USER,{\n    variables: { username: userParam }\n  });\n\n  const [deleteBook] = useMutation(DELETE_BOOK);\n\n  const [userData, setUserData] = useState({});\n\n  // use this to determine if `useEffect()` hook needs to run again\n  const userDataLength = Object.keys(userData).length;\n\n  useEffect(() => {\n    const getUserData = async () => {\n        setUserData(data);\n      \n    };\n\n    getUserData();\n  }, [userDataLength]);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await deleteBook(bookId, token);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const updatedUser = await response.json();\n      setUserData(updatedUser);\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\pages\\SearchBooks.js",[],"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\components\\Navbar.js",[],"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\components\\SignupForm.js",["57"],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const {data} = await addUser({\n        variables: { ...userFormData }\n      });\n      \n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\components\\LoginForm.js",["58"],"// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/react-hooks';\n\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [login,{error}] = useMutation(LOGIN_USER)\n\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const {data} = await login({\n        variables:{...userFormData}\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\API.js",[],"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\auth.js",[],"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\localStorage.js",[],"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\queries.js",[],"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\mutations.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":34,"column":6,"nodeType":"65","endLine":34,"endColumn":22,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":15,"column":21,"nodeType":"69","messageId":"70","endLine":15,"endColumn":26},{"ruleId":"67","severity":1,"message":"68","line":14,"column":17,"nodeType":"69","messageId":"70","endLine":14,"endColumn":22},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["73"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},"Update the dependencies array to be: [data, userDataLength]",{"range":"76","text":"77"},[950,966],"[data, userDataLength]"]