[{"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\index.js":"1","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\App.js":"2","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\pages\\SavedBooks.js":"3","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\pages\\SearchBooks.js":"4","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\components\\Navbar.js":"5","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\components\\SignupForm.js":"6","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\components\\LoginForm.js":"7","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\API.js":"8","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\auth.js":"9","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\localStorage.js":"10","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\queries.js":"11","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\mutations.js":"12"},{"size":266,"mtime":1609120229737,"results":"13","hashOfConfig":"14"},{"size":1047,"mtime":1609737162026,"results":"15","hashOfConfig":"14"},{"size":2608,"mtime":1610180727234,"results":"16","hashOfConfig":"14"},{"size":5215,"mtime":1610256432066,"results":"17","hashOfConfig":"14"},{"size":2534,"mtime":1610255176669,"results":"18","hashOfConfig":"14"},{"size":3542,"mtime":1610180707519,"results":"19","hashOfConfig":"14"},{"size":2624,"mtime":1610180683377,"results":"20","hashOfConfig":"14"},{"size":128,"mtime":1610253794102,"results":"21","hashOfConfig":"14"},{"size":1234,"mtime":1609118117443,"results":"22","hashOfConfig":"14"},{"size":793,"mtime":1609118117499,"results":"23","hashOfConfig":"14"},{"size":277,"mtime":1610180782579,"results":"24","hashOfConfig":"14"},{"size":1300,"mtime":1610180771280,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"8n1r7q",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\index.js",[],["53","54"],"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\App.js",[],"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\pages\\SavedBooks.js",["55","56","57","58"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  CardColumns,\r\n  Card,\r\n  Button,\r\n} from 'react-bootstrap';\r\n\r\nimport Auth from '../utils/auth';\r\nimport { removeBookId } from '../utils/localStorage';\r\n\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport { GET_ME } from '../utils/queries';\r\nimport { REMOVE_BOOK } from '../utils/mutations';\r\n\r\nconst SavedBooks = () => {\r\n  const { loading, data } = useQuery(GET_ME);\r\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\r\n\r\n  const userData = data?.me || [];\r\n\r\n  console.log(userData);\r\n\r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const { data } = await removeBook({\r\n        variables: { bookId },\r\n      });\r\n\r\n      removeBookId(bookId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${\r\n                userData.savedBooks.length === 1 ? 'book' : 'books'\r\n              }:`\r\n            : 'You have no saved books!'}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant='top'\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button\r\n                    className='btn-block btn-danger'\r\n                    onClick={() => handleDeleteBook(book.bookId)}\r\n                  >\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\pages\\SearchBooks.js",["59","60","61"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Card,\r\n  CardColumns,\r\n} from \"react-bootstrap\";\r\n\r\nimport Auth from \"../utils/auth\";\r\nimport { saveBook, searchGoogleBooks } from \"../utils/API\";\r\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\r\n\r\nimport { SAVE_BOOK } from \"../utils/mutations\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || [\"No author to display\"],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput(\"\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // const response = await saveBook(bookToSave, token);\r\n      const { data } = await saveBook({\r\n        variables: { input: bookToSave },\r\n      });\r\n\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light\" id=\"jumbotron\">\r\n        <Container>\r\n          <h2>Search for Books!</h2>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name=\"searchInput\"\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type=\"text\"\r\n                  size=\"lg\"\r\n                  placeholder=\"Search for a book\"\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : \"Search for a book to begin\"}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )}\r\n                      className=\"btn-block btn-info\"\r\n                      onClick={() => handleSaveBook(book.bookId)}\r\n                    >\r\n                      {savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )\r\n                        ? \"This book has already been saved!\"\r\n                        : \"Save this Book!\"}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\components\\Navbar.js",[],"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\components\\SignupForm.js",[],"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\components\\LoginForm.js",[],"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\API.js",[],"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\auth.js",[],"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\localStorage.js",[],"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\queries.js",[],"C:\\Users\\solom\\Desktop\\projects\\google-books\\client\\src\\utils\\mutations.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":1,"column":17,"nodeType":"68","messageId":"69","endLine":1,"endColumn":25},{"ruleId":"66","severity":1,"message":"70","line":1,"column":27,"nodeType":"68","messageId":"69","endLine":1,"endColumn":36},{"ruleId":"66","severity":1,"message":"71","line":19,"column":24,"nodeType":"68","messageId":"69","endLine":19,"endColumn":29},{"ruleId":"66","severity":1,"message":"72","line":34,"column":15,"nodeType":"68","messageId":"69","endLine":34,"endColumn":19},{"ruleId":"66","severity":1,"message":"73","line":13,"column":10,"nodeType":"68","messageId":"69","endLine":13,"endColumn":18},{"ruleId":"66","severity":1,"message":"71","line":28,"column":22,"nodeType":"68","messageId":"69","endLine":28,"endColumn":27},{"ruleId":"66","severity":1,"message":"72","line":82,"column":15,"nodeType":"68","messageId":"69","endLine":82,"endColumn":19},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'error' is assigned a value but never used.","'data' is assigned a value but never used.","'saveBook' is defined but never used.","no-global-assign","no-unsafe-negation"]